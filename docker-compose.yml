# Docker Compose for New Tab - Full Stack Setup
# This file orchestrates the complete New Tab application

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: newtab-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Server Configuration
      - HOST=0.0.0.0
      - PORT=8000
      - LOG_LEVEL=info
      - WORKERS=1
      
      # Database Configuration
      - DATABASE_FILE=/app/data/web_memory.db
      - QUERY_CACHE_FILE=/app/data/query_embeddings_cache.json
      
      # API Configuration (set this in .env file)
      - ARK_API_TOKEN=${ARK_API_TOKEN}
      
      # Vector Store Configuration
      - VECTOR_DIMENSION=2048
      
      # Cache Configuration
      - QUERY_CACHE_CAPACITY=1000
      - QUERY_CACHE_TTL_DAYS=7
      
      # Reload for development (set to false for production)
      - RELOAD=false
      
      # Python path
      - PYTHONPATH=/app
    volumes:
      # Persistent data storage with bind mounts
      - ./data/backend:/app/data
      - ./logs/backend:/app/logs
      
      # Development volume (uncomment for development)
      # - ./backend/src:/app/src:ro
    networks:
      - newtab_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.newtab.local`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  # Nginx for serving static extension files and reverse proxy
  nginx:
    image: nginx:alpine
    container_name: newtab-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./extension:/usr/share/nginx/html/extension:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./logs/nginx:/var/log/nginx
      # SSL certificates (if using HTTPS)
      # - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - newtab_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`newtab.local`)"

  # Redis for caching (optional, for scaling)
  redis:
    image: redis:7-alpine
    container_name: newtab-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - newtab_network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - scaling  # Only start with: docker-compose --profile scaling up

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: newtab-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - newtab_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring  # Only start with: docker-compose --profile monitoring up

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: newtab-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - newtab_network
    depends_on:
      - prometheus
    profiles:
      - monitoring  # Only start with: docker-compose --profile monitoring up

# Network configuration
networks:
  newtab_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volume configuration for persistent data
volumes:
  # Redis data (optional)
  redis_data:
    driver: local
  
  # Monitoring data (optional)
  prometheus_data:
    driver: local
  
  grafana_data:
    driver: local