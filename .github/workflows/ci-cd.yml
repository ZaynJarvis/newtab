# CI/CD Pipeline for New Tab Backend
# Comprehensive testing, building, and deployment workflow

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/**'
      - 'docker-compose*.yml'
      - 'Dockerfile'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/**'
      - 'docker-compose*.yml'
      - 'Dockerfile'
  schedule:
    # Run nightly builds
    - cron: '0 2 * * *'

env:
  # Test configuration
  ARK_API_TOKEN: test-token-for-ci
  DATABASE_FILE: ":memory:"
  QUERY_CACHE_FILE: "/tmp/test_query_cache.json"
  LOG_LEVEL: error
  
  # Docker configuration
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: newtab/backend

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install uv
      run: pip install uv
    
    - name: Install dependencies
      run: |
        cd backend
        uv sync --frozen
    
    - name: Run flake8 linting
      run: |
        cd backend
        uv run flake8 src/ --max-line-length=100 --ignore=E203,W503 --statistics
      continue-on-error: true
    
    - name: Run black formatting check
      run: |
        cd backend
        uv run black --check --diff src/
      continue-on-error: true
    
    - name: Run mypy type checking
      run: |
        cd backend
        uv run mypy src/ --ignore-missing-imports
      continue-on-error: true

  # Job 2: Unit and Integration Tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install uv
      run: pip install uv
    
    - name: Install dependencies
      run: |
        cd backend
        uv sync --frozen
    
    - name: Run unit tests
      run: |
        cd backend
        uv run pytest tests/ -v -m 'unit or not (e2e or performance or slow)' --tb=short --cov=src --cov-report=xml
    
    - name: Run integration tests
      run: |
        cd backend
        uv run pytest tests/ -v -m 'integration' --tb=short
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: backend/coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Job 3: End-to-End Tests with Playwright
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install uv
      run: pip install uv
    
    - name: Install dependencies
      run: |
        cd backend
        uv sync --frozen
    
    - name: Install Playwright browsers
      run: |
        cd backend
        uv run playwright install chromium
    
    - name: Start test server
      run: |
        cd backend
        uv run python -m uvicorn src.main:app --host 0.0.0.0 --port 8001 &
        sleep 10
      env:
        ARK_API_TOKEN: test-token-for-e2e
        DATABASE_FILE: ":memory:"
        QUERY_CACHE_FILE: "/tmp/e2e_test_cache.json"
    
    - name: Run E2E tests
      run: |
        cd backend
        uv run pytest tests/ -v -m 'e2e' --tb=short -s
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-test-artifacts
        path: |
          backend/test-results/
          backend/screenshots/

  # Job 4: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install uv
      run: pip install uv
    
    - name: Install dependencies
      run: |
        cd backend
        uv sync --frozen
    
    - name: Run performance tests
      run: |
        cd backend
        uv run pytest tests/ -v -m 'performance' --tb=short -s
    
    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: backend/performance_*.json

  # Job 5: Docker Build and Test
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [code-quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          VCS_REF=${{ github.sha }}
    
    - name: Test Docker image
      run: |
        # Create test environment
        echo "ARK_API_TOKEN=test-token-for-docker" > .env
        
        # Build and run tests in Docker
        docker-compose -f docker-compose.dev.yml --profile testing build test-runner
        docker-compose -f docker-compose.dev.yml --profile testing run --rm test-runner
    
    - name: Test Docker health check
      run: |
        # Start the service
        docker-compose up -d backend
        
        # Wait for health check
        timeout 60 bash -c 'until docker-compose ps | grep -q "healthy"; do sleep 2; done'
        
        # Test API endpoints
        sleep 5
        curl -f http://localhost:8000/health
        curl -f http://localhost:8000/docs
        
        # Cleanup
        docker-compose down

  # Job 6: Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './backend'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Safety check for Python dependencies
      run: |
        cd backend
        pip install safety
        safety check --json || true

  # Job 7: Deploy to Staging (on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [code-quality, test, e2e-tests, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:staging
          ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "Image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}"
        # Add your deployment script here
        # This could be kubectl, docker-compose, or API calls to your hosting provider

  # Job 8: Create Release (on version tags)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, test, e2e-tests, docker-build, security]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Build and push release image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Release ${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
        generate_release_notes: true
        body: |
          ## 🚀 New Tab Backend ${{ steps.version.outputs.VERSION }}
          
          ### Docker Images
          - `${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}`
          - `${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
          
          ### Quick Start
          ```bash
          docker run -p 8000:8000 -e ARK_API_TOKEN=your-token ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 9: Notification
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [code-quality, test, e2e-tests, docker-build]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.code-quality.result == 'success' && needs.test.result == 'success' && needs.e2e-tests.result == 'success' && needs.docker-build.result == 'success' }}
      run: |
        echo "✅ All CI/CD jobs completed successfully!"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
    
    - name: Notify failure
      if: ${{ needs.code-quality.result == 'failure' || needs.test.result == 'failure' || needs.e2e-tests.result == 'failure' || needs.docker-build.result == 'failure' }}
      run: |
        echo "❌ CI/CD pipeline failed!"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "E2E Tests: ${{ needs.e2e-tests.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        exit 1